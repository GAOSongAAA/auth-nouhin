events {
    # ワーカーごとの最大同時接続数（推奨値: 1024）
    # 最大同時接続数を増やすことで高負荷時の耐性を向上
    worker_connections 1024;
}

http {
    # MIMEタイプの設定ファイルをインクルード
    include       /etc/nginx/mime.types;
    # デフォルトのMIMEタイプ
    default_type  application/octet-stream;

    # ログフォーマットの定義
    # $remote_addr: クライアントIP
    # $remote_user: 認証ユーザー
    # $time_local: アクセス時刻
    # $request: リクエスト内容
    # $status: ステータスコード
    # $body_bytes_sent: 送信バイト数
    # $http_referer: リファラー
    # $http_user_agent: ユーザーエージェント
    # $http_x_forwarded_for: X-Forwarded-Forヘッダー
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # アクセスログとエラーログの出力先
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # 基本的なパフォーマンス設定
    sendfile on;                # sendfileによる高速ファイル送信
    tcp_nopush on;              # パケット送信の最適化
    tcp_nodelay on;             # レイテンシ削減
    keepalive_timeout 75s;      # Azure Gatewayの既定値に合わせて75秒に設定
    types_hash_max_size 2048;   # MIMEタイプのハッシュサイズ

    # Gzip圧縮設定（Azure Gatewayも圧縮をサポート）
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 上流サーバー（バックエンドAPI）の設定
    upstream backend {
        # Azure Gatewayのバックエンドプールのように、複数サーバーも指定可能
        server shohoSpringBuild:8080;
        # server 追加で冗長化可
    }

    # 80番ポート（HTTP）サーバーブロック
    server {
        listen 80;
        server_name localhost;

        # セキュリティヘッダー（Azure Gatewayも同様のヘッダーを付与）
        add_header X-Frame-Options "SAMEORIGIN" always; # クリックジャッキング対策
        add_header X-XSS-Protection "1; mode=block" always; # XSS対策
        add_header X-Content-Type-Options "nosniff" always; # MIMEスニッフィング防止
        add_header Referrer-Policy "no-referrer-when-downgrade" always; # リファラーポリシー
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always; # CSP

        # クライアントリクエストボディの最大サイズ（Azure Gatewayの既定値は100MB）
        client_max_body_size 100M;

        # ルートパスへのリバースプロキシ設定
        location / {
            # バックエンドAPIへのプロキシ
            proxy_pass http://backend;

            # 標準的なプロキシヘッダー（Azure Gatewayも同様に付与）
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # カスタムヘッダー（Azure Gatewayのカスタムヘッダー機能を模倣）
            proxy_set_header Authorization-Type "oauth2";

            # タイムアウト設定（Azure Gatewayの既定値に近い値）
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # レスポンスバッファリング（Azure Gatewayはバッファリング有効）
            proxy_buffering on;
            proxy_buffer_size 8k;      # Azure Gatewayのバッファサイズに近づける
            proxy_buffers 16 8k;
        }

        # ヘルスチェックエンドポイント（Azure Gatewayのプローブに相当）
        location /health_check {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 静的ファイル配信（Azure Gatewayの静的ファイルキャッシュに相当）
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # 415番ポート（カスタム用途）サーバーブロック
    server {
        listen 415;
        server_name localhost;

        # セキュリティヘッダー（上記と同様）
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # クライアントリクエストボディの最大サイズ
        client_max_body_size 100M;

        # ルートパスへのリバースプロキシ設定
        location / {
            proxy_pass http://backend;

            # 標準的なプロキシヘッダー
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # カスタムヘッダー（用途に応じて変更可）
            proxy_set_header Authorization-Type "database";

            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # レスポンスバッファリング
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
        }

        # ヘルスチェックエンドポイント
        location /health_check {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 静的ファイル配信
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}